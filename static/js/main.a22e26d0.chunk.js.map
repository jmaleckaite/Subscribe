{"version":3,"sources":["SendForm.js","ChannelList.js","PublishForm.js","App.js","index.js"],"names":["SendForm","props","checkboxChangeHandler","event","data","value","checked","console","log","setState","name","handleSubmit","alert","preventDefault","state","ch1","ch2","ch3","handleChange","bind","this","target","Grid","centered","columns","Column","Table","basic","celled","collapsing","Header","as","color","className","Search","placeholder","onSearchChange","type","Row","HeaderCell","Body","Cell","Checkbox","label","onChange","Footer","Button","size","floated","onClick","React","Component","ChannelList","channels","id","PublishForm","handleClick","color_blue","title","blue","selectedChannels","width","Object","values","map","float","toggleChannel","indexOf","App","Form","basename","process","Link","to","icon","disabled","length","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a22e26d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Header, Icon, Message, Checkbox, Form, Modal, \r\nSegment, Menu, Grid, Image, Input, Table, Search } from 'semantic-ui-react';\r\nimport { Switch, Route, NavLink, Link } from 'react-router-dom'; \r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\ninterface IState {\r\n\tch1: boolean;\r\n\tch2: boolean;\r\n\tch3: boolean;\r\n}\r\n\r\nclass SendForm extends React.Component<{}, IState> {\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tch1: false,\r\n\t\t\tch2: false,\r\n\t\t\tch3: false,\r\n\t\t};\r\n\t\t\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\t\r\n\t}\r\n\t\r\n\thandleChange(event) {\r\n\t\tthis.setState({value: event.target.value})\r\n\t}\r\n\t\r\n\tcheckboxChangeHandler = (event: React.FormEvent<HTMLInputElement>, data) => {\r\n\t\tconst value = data.checked;\r\n\t\tconsole.log(data);\r\n\t\tthis.setState({ [data.name]: data.checked });\r\n\t\tconsole.log(value);\r\n\t};\r\n\t\r\n\thandleSubmit = event => {\r\n\t\talert('Form submitted');\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(this.state);\r\n\t\t}\r\n\t\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tch1,\r\n\t\t\tch2,\r\n\t\t\tch3\r\n\t\t} = this.state\r\n\t\t\r\n\t\treturn (\r\n\t\t<div>\r\n\t\t<Grid centered columns={2}>\r\n\t\t<Grid.Column>\r\n\t\t<Table basic='very' celled collapsing>\r\n\t\t<Table.Header>\r\n\t\t<Header as='h1' color=\"blue\">Invia un nuovo messaggio agli utenti</Header>\r\n        <div className=\"searchbar\">\r\n\t\t<Search\r\n\t\tplaceholder=\"Cerca un canale\"\r\n\t\tonSearchChange={this.handleChange}\r\n\t\ttype='text'\r\n\t\tvalue={this.state.value}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t<Table.Row>\r\n\t\t<Table.HeaderCell>Channel</Table.HeaderCell>\r\n\t\t</Table.Row>\r\n\t\t</Table.Header>\r\n\t\t<Table.Body>\r\n\t\t<Table.Row>\r\n\t\t<Table.Cell>\r\n\t\t\r\n\t\t<div className=\"field\">\r\n\t\t<div className=\"checkbox\">\r\n\t\t<Checkbox\r\n\t\tlabel=\"Le Notizie del Portale\"\r\n\t\tname=\"ch1\"\r\n\t\tchecked={this.state.ch1}\r\n\t\tonChange={this.checkboxChangeHandler}\r\n\t\t/>\r\n\t\t </div>\r\n\t\t  </div>\r\n\t\t  </Table.Cell>\r\n\t\t  </Table.Row>\r\n\t\t  <Table.Row>\r\n\t\t  <Table.Cell>\r\n\t\t  <div className=\"field\">\r\n\t\t  <div className=\"ui checkbox\">\r\n\t\t  <Checkbox\r\n\t\t  label=\"Gli eventi e le Notizie della Cultura\"\r\n\t\t  name=\"ch2\"\r\n\t\t  checked={this.state.ch2}\r\n\t\t  onChange={this.checkboxChangeHandler}\r\n\t\t  />\r\n\t\t  </div>\r\n\t\t  </div>\r\n\t\t  </Table.Cell>\r\n\t\t  </Table.Row>\r\n\t\t  <Table.Row>\r\n\t\t  <Table.Cell>\r\n\t\t  <div className=\"field\">\r\n\t\t  <div className=\"ui checkbox\">\r\n\t\t  <Checkbox\r\n\t\t  label=\"Gli eventi e le notizie del centro per le famiglie\"\r\n\t\t  name=\"ch3\"\r\n\t\t  checked={this.state.ch3}\r\n\t\t  onChange={this.checkboxChangeHandler}\r\n\t\t  />\r\n\t\t  </div>\r\n\t\t  </div>\r\n\t\t  </Table.Cell>\r\n\t\t  </Table.Row>\r\n\t\t  </Table.Body>\r\n\t\t  \r\n\t\t  <Table.Footer>\r\n\t\t  <Table.Row>\r\n\t\t  <Table.HeaderCell />\r\n\t\t  <Table.HeaderCell>\r\n\t\t  <Button size='small' type='submit' color='blue' \r\n\t\t  floated='left' onClick={this.handleSubmit}>Invia ai canali selezionati</Button>\r\n\t\t  </Table.HeaderCell>\r\n\t\t  </Table.Row>\r\n\t\t  </Table.Footer>\r\n\t\t</Table>\r\n\t\t</Grid.Column>\r\n\t\t</Grid>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SendForm;","import React, {Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Channel from './Channel';\r\n\r\n\r\n\t\r\n\t\r\nfunction ChannelList(props) {\r\n\treturn (\r\n\t<div>{props.channels.map(c => <Channel key={c.id} name={c.name} />)}</div>\r\n\t);\r\n}\r\n\r\nChannelList.propTypes = {\r\n\tchannels: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ChannelList;\r\n","import React from 'react';\nimport { Button, Header, Icon, Message, Checkbox, Form, Modal, \nSegment, Menu, Grid, Image, Input, Table, Search } from 'semantic-ui-react';\nimport { Switch, Route, NavLink, Link } from 'react-router-dom'; \nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport SendForm from './SendForm';\nimport ChannelList from './ChannelList';\nimport { string } from 'prop-types';\n\n\n\n//assign different functions to buttons\n\n\nconst channels = [\n{ id: 1, name: 'Le notizie del Portale' }, \n{ id: 2, name: 'Gli eventi e le Notizie della Cultura' },\n{ id: 3, name: 'Gli eventi e le notizie del centro per le famiglie' },\n{ id: 4, name: 'Le notizie di Comune' }\n];\t\t\n\n\nclass PublishForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props) \n\t\t\n\t\tthis.state = {\n\t\t\tcolor_blue: true,\n\t\t\ttitle: \"Publicca\",\n\t\t\tblue: true\n\t\t};\n\t\t\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t   // this.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\t\n\tchangeColor() {\n\t\tthis.setState({color_blue: !this.state.color_blue})\n\t}\n\n\t\n\t\t\n\t\t\n\t\t//this.handleChange = this.handleChange.bind(this);\n\t\n\t\n\thandleClick = () => {\n\t\tconsole.log('clicked', this);\n\t\t//this.setState({ buttonColor: 'gray' })\n\t\t\n\t}\n\t\n\thandleChange(event) {\n\t\t\n\t   /* for (var i = 0, l = options.length; i < l; i++) {\n\t\t\tif (options[i].selected) {\n\t\t\tvalue.push(options[i].value);\n\t\t\t}\n\t\t} */\n\n\t\tthis.setState({value: event.target.value})\n\t}\n/*\n\thandleSubmit() {\n\t\talert(\"You have published these channels:\" + this.state.value);\n\t}\n\t*/\n\t\n\t\n\t\n\trender() {\n\tconsole.log(\"channels\",this.props.selectedChannels)\n\t\treturn (\n\t<div className=\"publishForm\">\n\t<Grid centered columns={2}>\n    <Grid.Column>\n\t<Table basic=\"very\" celled collapsing>\n\t<Table.Header width={10}>\n\t<Header as='h1' color=\"blue\">Pubblica il messaggio sui canali</Header>\n\t\t<div className=\"searchbar\">\n\t\t<Search\n\t\tplaceholder=\"Cerca un canale\"\n\t\tonSearchChange={this.handleChange}\n\t\ttype='text'\n\t\tvalue={this.state.value}\n\t\t/>\n\t\t</div>\n\t<Table.Row>\n\t<Table.HeaderCell width={10}>Channel</Table.HeaderCell>\n\t<Table.HeaderCell width='six'>Action</Table.HeaderCell>\n\t</Table.Row>\n\t</Table.Header>\n\t\n\t<Table.Body>\n\t{Object.values(channels).map(\n              ({ id, name }) => {\n                return (\n                  <Table.Row>\n\t\t\t\t\t<Table.Cell>{name}</Table.Cell>\n\t\t\t\t\t<Table.Cell>\n\t<Button\n\tfloat='right'\n\tcolor='blue'\n\tsize='mini'\n\tvalue='ch1'\n    onClick={(event)=>this.props.toggleChannel(id)}\n>\n\t{this.props.selectedChannels.indexOf(id) >= 0 ?\"Published\":\"Publish\"}\n\t</Button>\n\t</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t\t);\n\t\t\t  }\n\t)}\n\t</Table.Body>\n\t</Table>\n\t</Grid.Column>\n\t</Grid>\n\t</div>\n\t\t);\n\t}\n\t\n\t\n\t\n\t\n}\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\nexport default PublishForm;\n","import React from 'react';\r\nimport { Button, Header, Icon, Message, Checkbox, Form, Modal, \r\nSegment, Menu, Grid, Image, Text } from 'semantic-ui-react';\r\nimport { Switch, Route, NavLink, Link } from 'react-router-dom'; \r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport PublishForm from './PublishForm';\r\nimport SendForm from './SendForm';\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props) \r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tselectedChannels: []\r\n\t\t};\r\n\t}\r\n\r\n\ttoggleChannel = (id) => {\r\n\t\tconsole.log('clicked', id);\r\n\t\tif(this.state.selectedChannels.indexOf(id) < 0) {\r\n\t\tthis.setState({ selectedChannels: [...this.state.selectedChannels, id] });\r\n\t\t}\r\n\t};\r\n\r\n\t//describe disabled buttons state\r\n\trender() {\r\n\t\tconsole.log(this.state.selectedChannels,\"aaa\")\r\n\t\treturn (\r\n\t\t<div className=\"wrapper\">\r\n\t\t<Form>\r\n\t\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t<Button as={Link} to='/PublishForm' icon='download' size='large' color=\"white\"/>\r\n\t\t<Button as={Link} to='/SendForm' icon='plane' size='large' disabled = {this.state.selectedChannels.length == 0} />\r\n\t\t<Switch>\r\n\t\t<Route path=\"/PublishForm\">\r\n\t\t<PublishForm toggleChannel = {this.toggleChannel} selectedChannels = {this.state.selectedChannels} />\r\n\t\t</Route>\r\n\t\t<Route path=\"/SendForm\">\r\n\t\t<SendForm />\r\n\t\t</Route>\r\n\t\t</Switch>\r\n\t\t</Router>\r\n\t\t</Form>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\r\n\r\n\r\n\r\n\t\r\n\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n/**\nvar express = require('express');\nvar router = express.Router();\nvar nodemailer = require('nodemailer');\nvar cors = require('cors');\nconst creds = require('./config');\nimport response from { 'express' };\n\nvar transport = {\n\thost: 'smtp.gmail.com',\n\tport: 587,\n\tauth: {\n\tuser: creds.USER,\n\tpass: creds.Password\n\t}\n}\n\nvar transporter = nodemailer.createTransport(transport)\n\ntransporter.verify((error, success) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Server is ready to take messages');\n  }\n}); \n\n\nrouter.post('/send', (req, res, next) => {\n  var name = req.body.name\n  var email = req.body.email\n  var message = req.body.message\n  var content = `name: ${name} \\n email: ${email} \\n message: ${message} `\n\n  var mail = {\n    from: name,\n    to: 'RECEIVING_EMAIL_ADDRESS_GOES_HERE',  // Change to email address that you want to receive messages on\n    subject: 'New Message from Contact Form',\n    text: content\n  }\n\n  transporter.sendMail(mail, (err, data) => {\n    if (err) {\n      res.json({\n        status: 'fail'\n      })\n    } else {\n      res.json({\n       status: 'success'\n      })\n    }\n  })\n})\n\nconst app = express()\napp.use(cors())\napp.use(express.json())\napp.use('/', router)\napp.listen(3002)\n**/\n"],"sourceRoot":""}